/* written by Todd Hunter */
#define INITIAL_SMAPOPT_STRING_ARGUMENT "00000000"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "dsm.h"
#include "smapopt.h"
#define ANT_LIST_SZ (SMAPOPT_MAX_ANTENNAS + 1)

int present(char *search,char *token);
void usage(char *name);

void usage(char *name) {
  printf("Usage: %s -h -t <dsmVariableName> -v <dsmVariableName> -i <index(ForArrays)> -a <antennaList(ForArrays)> -m <machineName: default=hal9000>\n",name);
  printf("This program only works with numeric variables (int, float, double) and their\n");
  printf("arrays, as well as character arrays less than 100 bytes long\n");
  printf("Use -l to prevent the command from being logged to the SMAshLog\n");
  printf("Use -v to get the value of the variable\n");
  printf("Use -t to get the Unix timestamp of the variable\n");
}

static int requestedAntennas[ANT_LIST_SZ];
int DEBUG = 0;

int main(int argc, char  *argv[]) {
  int stat,i,j;
  smapoptContext optCon; 
  char var[DSM_NAME_LENGTH];
  char temp[DSM_NAME_LENGTH];
  char value[10], *ptr, *ptr2;
  time_t timestamp = 0;
  int readTimestamp = 0;
  int index, antennas;
  float dummyFloat;
  short dummyShort;
  long dummyLong;
  double dummyDouble;
  long dualrxpoint[8];
  double doublearray[8];
  float floatarray[8];
  int size, size2;
  char *cp, c;
  char *varString = INITIAL_SMAPOPT_STRING_ARGUMENT;
  char *machine =  INITIAL_SMAPOPT_STRING_ARGUMENT;
  char machineName[50];
  int helpFlag = 0;
  int nolog = 0;

  struct smapoptOption options[] = {
    {"antenna", 'a', SMAPOPT_ARG_ANTENNAS, requestedAntennas,'a',"antenna argument (comma or space delimited)"},
    {"debug", 'd', SMAPOPT_ARG_NONE, &DEBUG, 'd', "print debug messages"},
    {"help", 'h', SMAPOPT_ARG_NONE, &helpFlag, 'h', "print the usage"},
    {"index", 'i', SMAPOPT_ARG_INT, &index, 'i', 
       "Array index to read"},
    {"log", 'l', SMAPOPT_ARG_NONE, &nolog, 'l', 
       "Do not write the command to the SMAshLog"},
    {"machine", 'm', SMAPOPT_ARG_STRING, &machine, 'm', 
       "Machine name to contact"},
    {"timestamp", 't', SMAPOPT_ARG_STRING, &varString, 't', 
       "DSM variable to read the timestamp of (case insensitive)"},
    {"variable", 'v', SMAPOPT_ARG_STRING, &varString, 'v', 
       "DSM variable to read the value of (case insensitive)"},
    SMAPOPT_AUTOHELP
    { NULL, '\0', 0, NULL, 0 }
  };

  strcpy(machineName,"hal9000");
  index = -1;
  if((cp = strrchr(argv[0], '/')) == NULL) {
    cp = argv[0];
  } else {
    cp++;
  }
  for (i=0; i<argc; i++) {
    if (present(argv[i],"-l")||present(argv[i],"--log")) {
      nolog = 1;
    }
  }
  if (nolog==1) {
    /*    printf("Will not log to the SMAshLog\n");*/
    optCon = smapoptGetContext(cp, argc, argv, options, SMAPOPT_CONTEXT_NOLOG);
  } else {
    optCon = smapoptGetContext(cp, argc, argv, options, 0);
  }

  while ((c = smapoptGetNextOpt(optCon)) >= 0) {
    switch (c) {
    case 'h':
      usage(argv[0]);
      exit(-1);
    case 'v':
      for (j=0; j<strlen(varString); j++) {
	var[j] = toupper(varString[j]);
      }
      var[j] = 0;
      break;
    case 't':
      for (j=0; j<strlen(varString); j++) {
	var[j] = toupper(varString[j]);
      }
      readTimestamp = 1;
      var[j] = 0;
      break;
    case 'm':
      strcpy(machineName,machine);
      break;
    case 'a':
      break;
    case 'i':
      break;
    }
  }
  smapoptFreeContext(optCon);
  if (DEBUG) fprintf(stderr,"Finished parsing command-line\n");
  antennas = 0;
  for (i=0; i<ANT_LIST_SZ; i++) {
    if (requestedAntennas[i]) {
      antennas++;
    }
  }
  if (strlen(var) == 0) {
    printf("You must supply a DSM variable name via -v\n");
    usage(argv[0]);
    exit(-4);
  }
  if (!present(var,"dsm_") && !present(var,"DSM_")) {
    if (DEBUG) fprintf(stderr,"prepending DSM_\n");
    strcpy(temp,var);
    sprintf(var,"DSM_%s",temp);
    if (DEBUG) fprintf(stderr,"finished prepending DSM_\n");
  }
  if (DEBUG) fprintf(stderr,"checking type of %s\n",var);
  if ((var[strlen(var)-2] == '_') || 
      (var[strlen(var)-3] == '_' && var[strlen(var)-2] == 'C') ||
      (var[strlen(var)-4] == '_' && var[strlen(var)-3] == 'C')) {
    if (var[strlen(var)-1] == 'F') {
      if (DEBUG) {
	printf("It's a float\n");
      }
    } else if (var[strlen(var)-1] == 'D') {
      if (DEBUG) {
	printf("It's a double\n");
      }
    } else if (var[strlen(var)-1] == 'L') {
      if (DEBUG) {
	printf("It's a long int\n");
      }
    } else if (var[strlen(var)-1] == 'S') {
      if (DEBUG) {
	printf("It's a short int\n");
      }
    } else if (var[strlen(var)-2] == 'C') {
      if (DEBUG) {
	printf("It's a char array (less than 10 bytes long)\n");
      }
    } else if (var[strlen(var)-3] == 'C') {
      if (DEBUG) {
	printf("It's a char array (from 10-99 bytes long)\n");
      }
    } else {
      printf("%s does not yet support non-numeric values (nor arrays)\n",argv[0]);
      exit(-6);
    }
  } else {
    printf("You must provide the variable type (normally at the end of the name)\n");
    exit(-7);
  }
  stat = dsm_open();
  if (stat) {
    dsm_error_message(stat,"dsm_open");
    exit(-8);
  }
  if (index >= 0 || antennas > 0) { 
    switch (var[strlen(var)-1]) {
    case 'F': case 'f':
      ptr = floatarray;
      stat = dsm_read(machineName, var, ptr, &timestamp);
      if (readTimestamp != 0) {
	printf("%d\n",timestamp);
      } else {
	printf("%f\n",*((float *)ptr));
      }
      break;
    case 'D': case 'd':
      ptr = doublearray;
      stat = dsm_read(machineName, var, ptr, &timestamp);
      if (readTimestamp != 0) {
	printf("%d\n",timestamp);
      } else {
	printf("%f\n",*((double *)ptr));
      }
      break;
    case 'L': case 'l':
      ptr = dualrxpoint;
      stat = dsm_read(machineName, var, ptr, &timestamp);
      if (readTimestamp != 0) {
	printf("%d\n",timestamp);
      } else {
	printf("%d\n",*((long *)ptr));
      }
      break;
    case 'S': case 's':
      ptr = dualrxpoint;
      stat = dsm_read(machineName, var, ptr, &timestamp);
      if (readTimestamp != 0) {
	printf("%d\n",timestamp);
      } else {
	printf("%d\n",*((short *)ptr));
      }
      break;
    default:
      printf("Unrecognized variable type\n");
      break;
    }
  } else {
    do {
      if ((ptr = strstr(var,"_V")) != NULL) {
	if ((ptr2=strstr(ptr+1,"_V")) == NULL) {
	  printf("This is an array variable of dimension 1\n");
	  dimesion = 1;
	} else {
	  dimesion = 2;
	  printf("This is an array variable of dimension > 1 (assumed to be 2)\n");
	}
	if (isdigit(*(ptr+2))) {
	  sscanf(ptr+2,"%d",&size);
	  if (index < 0) {
	    printf("Sorry, you must specify -a or -i if it is an array variable (V%d)\n",size);
	    exit(-10);
	  }
	  if (dimension==2) {
	    sscanf(ptr2+2,"%d",&size2);
	    if (index < 0) {
	      printf("Sorry, you must specify -j if it is a 2-dimensional array variable\n");
	      exit(-11);
	    }
	  }
	}
      }
    } while (ptr != NULL); /* to only get the final occurence */
    /*    fprintf(stderr,"Reading from scalar variable on %s\n",machineName);*/
    stat = dsm_read(machineName, var, value, &timestamp);
    switch (var[strlen(var)-1]) {
    case 'F': case 'f':
      if (readTimestamp != 0) {
	printf("%d\n",timestamp);
      } else {
	printf("%f\n",*((float *)value));
      }
      break;
    case 'D': case 'd':
      ptr = doublearray;
      if (readTimestamp != 0) {
	printf("%d\n",timestamp);
      } else {
	printf("%f\n",*((double *)value));
      }
      break;
    case 'L': case 'l':
      ptr = dualrxpoint;
      if (readTimestamp != 0) {
	printf("%d\n",timestamp);
      } else {
	printf("%d\n",*((long *)value));
      }
      break;
    case 'S': case 's':
      ptr = dualrxpoint;
      if (readTimestamp != 0) {
	printf("%d\n",timestamp);
      } else {
	printf("%d\n",*((short *)value));
      }
      break;
    default:
      if (var[strlen(var)-2] == 'C' || var[strlen(var)-3] == 'C') {
	if (readTimestamp != 0) {
	  printf("%d\n",timestamp);
	} else {
	  printf("%s\n",(char *)value);
	}
      }
      break;
    }
  }
  if (stat == 0) {
    /*    printf("Read succeeded\n");*/
  } else {
    dsm_error_message(stat,"dsm_read");
    exit(-9);
  }
  dsm_close();
  return(stat);
}

int present(char *search,char *token) {
  if (strstr(search,token) == NULL) {
    return(0);
  } else {
    return(1);
  }
}

