#!/usr/local/bin/perl
# a script to retrieve stars for optical pointing, send the antennas there
# and take snapshots.
# Last modified by Todd on 26 Feb 2004: return the number of stars completed.
# 20040603 - Modified snapshot to remove bad pixel for Ant 8 at 417 199 - Ram
# 20040819 - Give single snapshot command instead of for loop over each antenna
# 20051003 - Option: brief, to take about 70 full-sky measurements. Nimesh.
# 20060105 - repeat snapshot. nimesh.
# 20060109 - replace snapshot as a spawned perl process by a snapshotSubroutine
# 20060214 - subtract a blank image in snapshot to get rid of hot pixels. NAP

#Initializations
$azloop=0; #loop condition flags
$elloop=0;
$myPID = $$; #to get the process id of this script during runtime
$|=1; 		#to always flush stdout
$latitude=19.8241666667; # pad-1 from taco's padLocations file.
$MINMAG=2.;	# magnitude limits for star selections
$MAXMAG=9.0;
$pi=4.0*atan2(1.0,1.0);
$radian=$pi/180.;

$SIG{INT}=\&Pause;  #signal handling for ctrl-c.

sub Usage() {
    print "Usage: azelstar [-a <antennaList>] [-x 4] -z <azimuth> -e <elevation> -w <full-width> -n <nmax> -d <up/down/cw/ccw>\n azelstar [--antenna <antennaList>] --zimuth 180. --elevation 45 --width 10 [--nmax 5] [--xclude 4] [-r 20-75] [-k]\n";
    print "(if -a is not specified, all antennas will move to the star simultanesously, except the one xcluded).\n";
    print "If the azimuth is not specified, a full circle of data will be acquired in clockwise or counter-clockwise directions at the specified elevation.\n";
    print "If the elevation is not specified, an el. strip of data will be
acquired in up or down direction as specified.\n";
    print "Use -c to clean the central quarter of the images on the PC104\n";
    print "Use -k to keep the present pointing mode intact (i.e. radio)\n";
    print "Use -b to select far fewer stars for el-strip.\n";
}

#-----------------------------snapshotSubroutine----------------------------------------------
sub snapshotSubroutine{

$myant=@_[0];
$exposure=@_[1];
$cleanFlag=@_[2];

print "myant=$myant\n";
print "exposure=$exposure\n";
print "cleanFlag=$cleanFlag\n";


$xmin = 250;
$xmax = 420;
$ymin = 180;
$ymax = 300;
$verboseFlag=0;

open(mylogfile,">>/rootfs/logs/SMAshLog");
$myline = `date -u +"%a %b %d %X %Y"`;
chop($myline);
$myuser = $ENV{"USER"};
$myargs="snapshot -a $myant -s $exposure $cleanFlag";
printf mylogfile "%s ($myuser): $0 %s\n", $myline, $myargs;
close(mylogfile);

$c90response=`c90cmd -a $myant -c "snapshot -e $exposure $clean"`;
if ($verboseFlag) {
   print "c90cmd/c90header response = $c90response\n";
}
($crap,$myending) = split("isitc90=",$c90response);
($isitc90,$crap) = split("min=",$myending);
chomp($isitc90);

# search for lines that begin with opteln: newfilename=
    @mylines = split(/\n/,$c90response);
    $what = "optel$myant: newfilename";
    $headerline = "optel$myant: header";
    foreach $myline (@mylines) {
	if ($verboseFlag) {
	    printf "Searching $myline for $what\n";
	}
	if ($myline =~ /$what/) {
	    if ($verboseFlag) {
		printf "Found it\n";
	    }
	    ($junk,$newfilename) = split('=',$myline);
	}
	if ($verboseFlag) {
	    printf "Searching $myline for $headerline\n";
	}
	if ($myline =~ /$headerline/) {
	    if ($verboseFlag) {
		printf "Found it\n";
	    }
	    ($junk,$header) = split('=',$myline);
	}
    }
    print "newfilename=$newfilename\n";
print "Subtracting blank image...\n";
#first delete the previous image...\n";
$previousImage="/data/engineering/opoint/ant$myant/latestImage.fits";
$responseRm=`rm $previousImage`;
if($responseRm ne "") {print "$responseRm\n";}
if($exposure<100){$blankImage="/data/engineering/opoint/ant$myant/blank50.fits";}
if($exposure >=100 and $exposure<200){$blankImage="/data/engineering/opoint/ant$myant/blank100.fits";}
if($exposure >=200 and $exposure<400){$blankImage="/data/engineering/opoint/ant$myant/blank200.fits";}
if($exposure >=400 and $exposure<600){$blankImage="/data/engineering/opoint/ant$myant/blank400.fits";}
if($exposure >=600){$blankImage="/data/engineering/opoint/ant$myant/blank600.fits";}
$latestImage="/data/engineering/opoint/ant$myant/latestImage.fits";
$responseImarith=`imarith $newfilename $blankImage s $latestImage`;
if($responseImarith ne "") {print "$responseImarith\n";}

# Now call fits2fit, it creates a file called fit.data in the 
# antenna's unique opoint directory.
#if($myant==5) {$xmin=300;$xmin=390;}
    if (($myant==7)||($myant==8)) {
	printf "Running /application/bin/fits2fit_asiaa $latestImage $xmin $xmax $ymin $ymax\n";
	$response=`/application/bin/fits2fit_asiaa $latestImage $xmin $xmax $ymin $ymax`;
    } else {
	printf "Running /application/bin/fits2fit_sao $latestImage $xmin $xmax $ymin $ymax\n";
	$response=`/application/bin/fits2fit_sao $latestImage $xmin $xmax $ymin $ymax`;
    }
#    print "antenna$myant fits2fit response = $response\n";
    printf "Running /application/bin/centroid /data/engineering/opoint/ant$myant/fit.data\n";
    $response=`/application/bin/centroid /data/engineering/opoint/ant$myant/fit.data`;
    printf "centroid response = %s\n", $response;
    ($xpix,$ypix,$azoff,$eloff,$azwidth,$elwidth,$azofferr,$elofferr,
     $azwidtherr,$elwidtherr,$rms) = split(/ /,$response);
    ($sec,$min,$hr,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime(time());
    $year -= 100;
    $year += 2000;
    $mon += 1;
    $logfile = sprintf("/data/engineering/opoint/ant%d/%04d%02d%02d",
		       $myant,$year,$mon,$mday);
    $catlogfile = sprintf(">>%s",$logfile);
    open(FILE,$catlogfile) || die "Failed to open file = $logfile\n";
    chmod(0666,$logfile);
    $bias = 0;
    $gain = 0;
    print "Writing to logfile = $logfile\n";
#    print "header,$azoff, $eloff, $azofferr,$elofferr,$bias,$gain\n";
    printf FILE "%soptical: %f %f %d,%f,%f,%f,%f,%d,%d,%s\n",
        $header, $xpix,$ypix,$isitc90, $azoff, $eloff, $azofferr,$elofferr,
        $bias,$gain,$newfilename;
    close(FILE);
    $response = `wc $logfile`;
#    print "Response from wc command = $response\n";
    ($lines,$words,$bytes) = split(' ',$response);
    print "There are now $lines stars in the log file for antenna $antenna.\n";
}
#----------------------------end of snapshotSubroutine----------------------------------------

@antennalist = ();

use Getopt::Long;
$antlist = "";
$xclude = 0;
$nmax = 0;
foreach $i ( @ARGV ) {
    $args = $args . $i . " ";
}

GetOptions('antenna=s'=>\$antlist,'elevation=f'=>\$elevation,'zimuth=f'=>\$azimuth,'width=f'=>\$width,'nmax=i'=>\$nmax,'xclude=i'=>\$xclude,'direction=s'=>\$direction,'range=s'=>\$range,'clean','help','keepmode','brief');

if ($opt_help) {
    Usage(); 
    exit;
}

open(logfile,">>/rootfs/logs/SMAshLog");
$line = `date -u +"%a %b %d %X %Y"`;
chop($line);
$user = $ENV{"USER"};
printf logfile "%s ($user): $0 %s\n", $line, $args;
close(logfile);

if ($opt_clean) {
#    print "Cleaning will be done\n";
    $clean = "-c";
} else {
    $clean = "";
}

if ($opt_brief) {print "brief mode.\n";$brief=1;} else {$brief=0;}

# default parameters
 if ($width eq "") {$width = 7.0;}
 if ($nmax eq "") {$nmax = 1;}

print "antlist = $antlist\n";

#find the antennas specified in the project command.
if ($antlist eq "") {
    for($i=1; $i<=8; $i++) {
# the following could be replaced by `getAntList` followed by split()
	$antenna_status=`value -a $i -v antenna_status`;
	if ($antenna_status==1) { 
	    push(@antennalist,$i);
	}
    }
    $antpick = 0;
} else {
    $antpick = 1;
    $antListSpace = `parseAntennaList $antlist`;
    @antennalist = split(' ',$antListSpace);
}
$antListComma = "";
foreach $ant (@antennalist) {
    if (length($antListComma) > 0) {
	$antListComma = $antListComma . "," . $ant;
    } else {
	$antListComma = $ant;
    }
}
print "antListSpace = $antListSpace\n";
print "antListComma = $antListComma\n";
#exit;

#read in the hipparcos catalog
open(HIPCAT,"/global/catalogs/hipcat")||die"Could not open hipparcos catalog.\n";
@hipcat=<HIPCAT>;
close(HIPCAT);

#if az OR el are left out in command line arguments, do a loop
#in the variable that is left out.
if($elevation eq ""){$azloop=1;}
if($azimuth eq ""){$elloop=1;}

if (($azloop==0)&&($elloop==0)) {
    getStars($azimuth,$elevation);
} else {
    if(($azloop==1)&&($elloop==0)){
	if(($direction ne "up")&&($direction ne "down")){Usage(); exit;}
    }
    if(($elloop==1)&&($azloop==0)){
	if(($direction ne "cw")&&($direction ne "ccw")){Usage(); exit;}
    }
    if(($elloop==1)&&($azloop==1)){
	$azimuth=`value -a $antennalist[0] -v actual_az_deg`;
	chomp($azimuth);
	$elevation=`value -a $antennalist[0] -v actual_el_deg`;
	chomp($elevation);
	getStars($azimuth,$elevation);
    }
}

if($elloop==1) {
    if($range eq "") {
	$azmincw=-140; $azmaxcw=220;
	$azminccw=-150; $azmaxccw=210;
    } else {
	($enteredmin,$enteredmax)=split('-',$range);
	$azmincw=$enteredmin; $azmaxcw=$enteredmax;
	$azminccw=$enteredmin; $azmaxccw=$enteredmax;
    }
    
    if($direction eq "cw") {
	for($iaz=$azmincw; $iaz<$azmaxcw;$iaz=$iaz+10)
	{$azimuth=$iaz;getStars();}
    }
    if($direction eq "ccw") {
	for($iaz=$azmaxccw; $iaz>$azminccw;$iaz=$iaz-10)
	{$azimuth=$iaz;getStars();}
    }
}
if($azloop==1) {
    if($range eq "") {
# I narrowed this range to prevent hitting elevation limits - Todd
	$elminup=18; $elmaxup=83;   
	$elmindown=17; $elmaxdown=83;
    } else {
	($enteredmin,$enteredmax)=split('-',$range);
	$elminup=$enteredmin; $elmaxup=$enteredmax;
	$elmindown=$enteredmin; $elmaxdown=$enteredmax;
    }
    if($direction eq "up") {
        if($brief==1){
	@arrayOfElevations=(int(rand($elmaxup-$elminup)+$elminup), 
			int(rand($elmaxup-$elminup)+$elminup),
			int(rand($elmaxup-$elminup)+$elminup), 
			int(rand($elmaxup-$elminup)+$elminup),
			int(rand($elmaxup-$elminup)+$elminup));
	@aSortedArrayOfElevations=sort @arrayOfElevations;
        for($elArrayIndex=0;$elArrayIndex<5;$elArrayIndex++)
	{$elevation=$aSortedArrayOfElevations[$elArrayIndex];getStars();}
        }
        else {
	for($iel=$elminup;$iel<$elmaxup;$iel=$iel+5)
	{$elevation=$iel;getStars();}
        }
    }
    if($direction eq "down") {
        if($brief==1){
	@arrayOfElevations=(int(rand($elmaxdown)+$elmindown), 
			int(rand($elmaxdown-$elmindown)+$elmindown),
			int(rand($elmaxdown-$elmindown)+$elmindown), 
			int(rand($elmaxdown-$elmindown)+$elmindown),
			int(rand($elmaxdown-$elmindown)+$elmindown));
	@bSortedArrayOfElevations=sort {$b <=> $a} @arrayOfElevations;
        for($elArrayIndex=0;$elArrayIndex<5;$elArrayIndex++)
	{$elevation=$bSortedArrayOfElevations[$elArrayIndex];getStars();}
        }
	else {
	for($iel=$elmaxdown;$iel>$elmindown;$iel=$iel-5)
	{$elevation=$iel;getStars();}
	}
    }
}

sub getStars() {
    $lststring=`lst`;
    ($junk,$junk,$junk,$junk,$junk,$junk,$junk,$junk,$lst)=split(' ',$lststring);
    
    ($lsth,$lstm,$lsts)=split('\:',$lst);
    $lst=($lsth+$lstm/60.)*0.26179939; # convert hours to radians
    $minmag=$MINMAG;
    $maxmag=$MAXMAG;
    $az=$azimuth*$radian;
    $el=$elevation*$radian;
# try to stay at least 1 degree from the limits (14-85)
    if ($elevation < 15+$width*0.5) {
	$width_radian=($elevation-15)*$radian;
    } else {
	if ($elevation > 84-$width*0.5) {
	    $width_radian=(84-$elevation)*$radian;
	} else {
	    $width_radian=$width*$radian/2.;
	}
    }
    
    $phi=$radian*$latitude;
    $cosphi=cos($phi);
    $sinphi=sin($phi);
    
#calculate declination from elevation and latitude.
    $sintheta=sin($el)*$sinphi+cos($el)*cos($az)*$cosphi;
    $costheta=(1.0-$sintheta*$sintheta)**0.5;
    $dec=atan2($sintheta,$costheta);
    $dummy=$dec/$radian;
    
#calculate hour angle from elevation, azimuth and latitude.
    $sinh=-cos($el)*sin($az);
    $cosh=sin($el)*$cosphi-cos($el)*cos($az)*$sinphi;
    if ($cosh == 0.) {
	$h=0.;
    } else {
	$h=atan2($sinh,$cosh);
    }
    
    
#calculate right ascension and get limits in RA and DEC.
    $RA=$lst-$h;
    
    if ($RA < 0.) {$RA=$RA+2.*$pi;}
    if ($RA > 2.*$pi) {$RA=$RA-2.*$pi;}
    
    $RA1=$RA-$width_radian/cos($dec); 
    $RA2=$RA+$width_radian/cos($dec);
#if ($RA1 < 0.) {$RA1=$RA1+2.*$pi;}
#if ($RA1 > 2.*$pi) {$RA1=$RA1-2.*$pi;}
#if ($RA2 < 0.) {$RA2=$RA2+2.*$pi;}
#if ($RA2 > 2.*$pi) {$RA2=$RA2-2.*$pi;}
    $DEC1=$dec-$width_radian;
    $DEC2=$dec+$width_radian;
    
    $ra1=$RA1/$radian;
    $ra2=$RA2/$radian;
    $dec1=$DEC1/$radian;
    $dec2=$DEC2/$radian;
    
    $j=0;
    for($i=0;$i<$#hipcat;$i++) {
	# ($jj,$source,$rah,$ram,$ras,$decd,$decm,$decs,$jj,$jj,$jj,$jj,$mv,$jj,$sptype) = split(' ',$hipcat[$i]);
	($source,$rah,$ram,$ras,$decd,$decm,$decs,$mv,$sptype) = split(' ',$hipcat[$i]);
	$catra=$rah+$ram/60.+$ras/3600.;
	$catra=$catra*$radian*15.;
	if($decd<0.){$decsign=-1;}
	if($decd>=0.){$decsign=1;}
	$catdec=abs($decd)+$decm/60.+$decs/3600.;
	$catdec=$catdec*$radian;
	if($decsign==-1) {$catdec=-$catdec;}
	
	if (($catra>=$RA1) && ($catra<=$RA2) && ($catdec>=$DEC1) && ($catdec<=$DEC2)
	    && ($mv>=$minmag) && ($mv<=$maxmag)) {
	    $_=$sptype;
#	if((/^M/)||(/^K/)||(/^G/))
	    if ((/^M/)||(/^K/)) {
		$mysources[$j]=$source;
		$mysptype[$j]=$sptype;
		$mymag[$j]=$mv;
		$j++;
	    }
	}
    }
    print "azelstar: pid=$myPID>\nFound $j stars.";
    if($j==0) {
#`radio`;
	return(0);}
    if(($nmax>0)&&($j>$nmax)) {
	$j=$nmax;
	print " observe the first $nmax of them.";
    }
    print "\n\n";
    
#
# here is the main 'for' loop over all the stars found
#
    for($i=0; $i<$j; $i++) {
	$no = $i+1;
	print "azelstar: pid=$myPID> $no/$j\) $mysources[$i] is a $mymag[$i] magnitude and $mysptype[$i] type star...\n";
###
### Comment out these 3 lines (and another 2 lines below) if you want to
###   do the automatic optical pointing
###
#print "...do you want to observe it? [y/n]\n";
#$answer=<STDIN>;
#chop($answer);
###
### If you comment out above 3 lines (and another 2 lines below),
###   alive this line. 
	$answer = "y";
###
	if($answer eq "y") {
	    $integrationtime=200; # default
	    if(($mymag[$i]>0)&&($mymag[$i]<=2.0)){$integrationtime=50;}
	    if(($mymag[$i]>2.0)&&($mymag[$i]<=4.0)){$integrationtime=100;}
	    if(($mymag[$i]>4.0)&&($mymag[$i]<=5.0)){$integrationtime=200;}
	    if(($mymag[$i]>5.0)&&($mymag[$i]<=6.0)){$integrationtime=400;}
	    if(($mymag[$i]>6.0)&&($mymag[$i]<=7.0)){$integrationtime=600;}
	    if(($mymag[$i]>7.0)&&($mymag[$i]<=8.0)){$integrationtime=1000;}
	    if(($mymag[$i]>8.0)&&($mymag[$i]<=9.0)){$integrationtime=2000;}
	    if ($antpick == 0) {
		if ($opt_keepmode == 0) {
		  `optical`;
	        }
		printf "Sending all antennas (%s) %s\n", $antListComma, $mysources[$i];
		$response=`observe -s $mysources[$i]`;
	    } else {
		foreach $ant (@antennalist) {
		    `optical -a $ant`;
		    printf "Sending antenna %d to %s\n", $ant, $mysources[$i];
		    $response=`observe -a $ant -s $mysources[$i]`;
		}
	    }
	    print "azelstar: pid=$myPID> Waiting for antennas $antList to reach the star\n";
	    `antennaWait -a $antListComma -s $mysources[$i] -e 2`;

	    foreach $ant (@antennalist) {
	    snapshotSubroutine($ant,$integrationtime,$clean);
	    }

	} # end of 'if $answer == y'
    } # end of the main 'for' loop over all the stars found
} #subroutine getStars.

# put back radio flag for all antennas
print "Exiting azelstar. Please remember to give the radio command if you are done with optical pointing.\n";
print "";
print "";
#`ssh root\@128.171.116.125 "play /usr/local/soundServer/sounds/StarTrek/Boatswain_Whistle.WAV"`;
#
#playSound -f /usr/local/soundServer/sounds/StarTrek/Boatswain_Whistle.WAV`;
#return($j);

sub Pause()
{
    print "azelstar: pid=$myPID> Hit enter to continue, q to quit.";
    $kbd=<STDIN>;
    chop($kbd);
    print "Entered:$kbd";
    if($kbd eq "q") {
	die "Bye. Please remember to give the radio command if done with optical pointing.\n";
    }
}
