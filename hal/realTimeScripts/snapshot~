#!/usr/local/bin/perl
# 3 Jun 2003 NaP
# Revised snapshot for the new guidescopes. 
#
# 11 Feb 2004 NaP
# Revised for centroiding and fitsio on hal9000
# only image display on smadata now. New format file
# is written out for pointing data using pointingHeader ph.o

# 26 apr 2004 NaP, added if conditions for ASIAA guidescopes
# to use the fits2fit and centroid versions for images which
# are shorter by 2 pixels on either side.
#
# 03 Jun 2004 Ram: Bug in definitions of xmin xmax etc - fixed- 
#  hope nothing else breaks

use Getopt::Long;
$Getopt::Long::autoabbrev=1;

$xmin = 250;
$xmax = 430;
$ymin = 180;
$ymax = 300;

sub Usage(){
    printf "Usage: snapshot -a 4 -s 200 [-c -x $xmin -u $xmax -y $ymin -v $ymax]\n";
    printf "  Specify -c to clean the central quarter of the images on the PC104\n";
}

foreach $i ( @ARGV ) {
    $args = $args . $i . " ";
}

$antennaPick = 0;
GetOptions('antenna=s'=>\$antennaPick,
	   'seconds=i'=>\$exposure,
	   'xmin=i'=>\$xmin,
	   'ymin=i'=>\$ymin,
	   'umax=i'=>\$xmax,
	   'vmax=i'=>\$ymax,
	   'clean'=>\$cleanFlag,
	   'help'=>\$helpFlag,
	   'debug'=>\$verboseFlag,
	   'radio'=>\$roffsetsFlag,
	   'put'=>\$putOffsetsFlag
	);


if ($helpFlag) {
    &Usage;
    exit(0);
}

if ($cleanFlag) {
    $clean = "-c";
} else {
    $clean = "";
}

if (!$exposure) {
  &Usage;
  die "Please specify exposure time using -s (in msec).\n";
}

if ($antennaPick != 0) {
  $checklist = `/application/bin/getAntList -a $antennaPick -l`;
  @antennalisttemp = split(' ',$checklist);
  $numants = @antennalisttemp;
  for ($antindex=0; $antindex<$numants; $antindex++) {
    if (($antennalisttemp[$antindex]<1) || ($antennalisttemp[$antindex]>8)) {
      Usage();
      die "Check the command-line arguments.\n";
    }
    push @antennalist, $antennalisttemp[$antindex];
#    printf "Will use antenna %d\n",$antennalisttemp[$antindex];
  }
} else {
# no antenna was specified, get the list from the project command
    print "Will use all antennas in the project:\n";
    $antcount = 0;
    for ($i=1; $i<=8; $i++) {
	$antenna_status=`value -a $i -v antenna_status`;
	if ($antenna_status==1) { 
	    push(@antennalist,$i); 
	    print "Will use antenna $i\n";
	    $antcount++;
	}       
    }
    print "@antennalist\n";
    $command = "commaAntennaList -a \"@antennalist\"";
    print $command."\n";
    $antennaPick = `commaAntennaList "@antennalist"`;
    chomp($antennaPick);
}

print "Will use antennas: $antennaPick\n"; 

open(logfile,">>/rootfs/logs/SMAshLog");
$line = `date -u +"%a %b %d %X %Y"`;
chop($line);
$user = $ENV{"USER"};
printf logfile "%s ($user): $0 %s\n", $line, $args;
close(logfile);

$c90response=`c90cmd -a $antennaPick -c "snapshot -e $exposure $clean"`;
#if ($verboseFlag) {
    print "c90cmd/c90header response = $c90response\n";
#}

foreach $antenna (@antennalist) {
#
# search for lines that begin with opteln: newfilename=
#
    @lines = split(/\n/,$c90response);
    $what = "optel$antenna: newfilename";
    $headerline = "optel$antenna: header";
    foreach $line (@lines) {
#	printf "Searching $line for $what\n";
	if ($line =~ /$what/) {
#	    printf "Found it\n";
	    ($junk,$newfilename) = split('=',$line);
	}
#	printf "Searching $line for $headerline\n";
	if ($line =~ /$headerline/) {
#	    printf "Found it\n";
	    ($junk,$header) = split('=',$line);
	}
    }
    print "newfilename=$newfilename\n";
# Now call fits2fit, it creates a file called fit.data in the 
# antenna's unique opoint directory.
    if (($antenna==7)||($antenna==8)) {
	printf "Running /application/bin/fits2fit_asiaa $newfilename $xmin $xmax $ymin $ymax\n";
	$response=`/application/bin/fits2fit_asiaa $newfilename $xmin $xmax $ymin $ymax`;
    } else {
	printf "Running /application/bin/fits2fit_sao $newfilename $xmin $xmax $ymin $ymax\n";
	$response=`/application/bin/fits2fit_sao $newfilename $xmin $xmax $ymin $ymax`;
    }
#    print "antenna$antenna fits2fit response = $response\n";
    printf "Running /application/bin/centroid /data/engineering/opoint/ant$antenna/fit.data\n";
    $response=`/application/bin/centroid /data/engineering/opoint/ant$antenna/fit.data`;
    printf "centroid response = %s\n", $response;
    ($xpix,$ypix,$azoff,$eloff,$azwidth,$elwidth,$azofferr,$elofferr,
     $azwidtherr,$elwidtherr,$rms) = split(/ /,$response);
    ($sec,$min,$hr,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime(time());
    $year -= 100;
    $year += 2000;
    $mon += 1;
    $logfile = sprintf("/data/engineering/opoint/ant%d/%04d%02d%02d",
		       $antenna,$year,$mon,$mday);
    $catlogfile = sprintf(">>%s",$logfile);
    open(FILE,$catlogfile) || die "Failed to open file = $logfile\n";
    chmod(0666,$logfile);
    $bias = 0;
    $gain = 0;
    print "Writing to logfile = $logfile\n";
#    print "header,$azoff, $eloff, $azofferr,$elofferr,$bias,$gain\n";
    printf FILE "%soptical: %f %f %d,%f,%f,%f,%f,%d,%d\n",
        $header, $xpix,$ypix,$isitc90, $azoff, $eloff, $azofferr,$elofferr,
        $bias,$gain;
    close(FILE);
    $response = `wc $logfile`;
#    print "Response from wc command = $response\n";
    ($lines,$words,$bytes) = split(' ',$response);
    print "There are now $lines stars in the log file for antenna $antenna.\n";
    
    # orpointing predicted radio offsets
    if($roffsetsFlag) {
	# first read the coefficients from the orpointing file.
	$orpointingfile="/otherPowerPCs/acc/$antenna/configFiles/orCoefficients";
	open(ORFILE,"$orpointingfile")||"Could not open orpointing file.";
	while(<ORFILE>) {
	    if(!/^\#/) {
		($azoff_a,$azoff_b,$eloff_a,$eloff_b)=split(' ',$_);
	    } 
	}
	close(ORFILE);
	#compute the razoff and reloff.
	$el=`value -a $antenna -v actual_el_deg`;
        chomp($el);
	$optical_pmdaz=`value -a $antenna -v pmdaz`;
	chomp($optical_pmdaz);
	$optical_pmdel=`value -a $antenna -v pmdel`;
	chomp($optical_pmdel);
	`radio -a $antenna`;
	sleep(3);
	$radio_pmdaz=`value -a $antenna -v pmdaz`;
	chomp($radio_pmdaz);
	$radio_pmdel=`value -a $antenna -v pmdel`;
	chomp($radio_pmdel);
        $razoff=$azoff+$azoff_a+$azoff_b*$el+$optical_pmdaz-$radio_pmdaz;
        $reloff=$eloff+$eloff_a+$eloff_b*$el+$optical_pmdel-$radio_pmdel;
	printf "predicted radio offsets: %.1f, %.1f \n",$razoff, $reloff;
	if($putOffsetsFlag) {
	    print "applying the predicted radio offsets.\n";
	    `azoff -a $antenna -s $razoff`;
	    sleep 1;
	    `eloff -a $antenna -s $reloff`;
	    sleep 1;
	} 
    } # if radio offsets were requested (orpointing)
} # for each antenna
