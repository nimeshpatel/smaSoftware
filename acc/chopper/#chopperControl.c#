/* Chopper Control and Monitor Daemon */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <string.h>
#include <pthread.h> /* threads */
#include <sys/file.h> /* for device open */
#include <sys/types.h>
#include <fcntl.h>
#include <signal.h>
#include <math.h>
#include <stderrUtilities.h>
#include <chopperControl.h>

#include "smadaemon.h" /* for QUIT_RTN */
#include "rm.h" /* reflective memory */
#include "iPOctal232.h"

#define PMAC_RTN_SIZE 128

#define CONTROL_PRIO 20
#define MONITOR_PRIO 20
#define pmacrwp(x, y) pmacrw(x, y); SendMessageToRM(x)

/* chopperControl.c */
void *ChopperPMAC();
void *ChopperMonitor();
/* void pmacw(char *command); */
void pmacrw(char *command, char *rtn);
void ReadConfigFile(void);
void ReadFarCounts(void);
void ReadNearCounts(void);
int MoveXyz(int *newPos);
int UpdateXyz(void);
void ReadCmdPos(void);
void ReadCaptureRegs(int * pos);
void ReadCaptureFlags(int * flags);
void ReadXyzEncoders(int * pos);
int MoveTilt(int t);
int CheckHome(void);
void ResetPMAC( void);
void RestartMotors();
void HomeChopper(void);
void InitChopper(void);
void WriteCmdPos(char type);
void SendMessageToRM(char *messg);


/* Global variables */

/* Chopper system control and status RM variables */
#if 1
char xCountsv[] = 	"RM_CHOPPER_X_COUNTS_D";
char yCountsv[] = 	"RM_CHOPPER_Y_COUNTS_D";
char zCountsv[] = 	"RM_CHOPPER_Z_COUNTS_D";
char tiltCountsv[] = 	"RM_CHOPPER_TILT_COUNTS_D";
#endif
char pmacCmdv[] = 	"RM_CHOPPER_PMAC_COMMAND_C30";
char pmacResponsev[] = 	"RM_CHOPPER_PMAC_RESPONSE_C128";
char statusBitsv[] =	"RM_CHOPPER_STATUS_BITS_V16_B";
char monTimestampv[] =	"RM_CHOPPER_MONITOR_TIMESTAMP_L";
char cmdv[] =		"RM_CHOPPER_SMASH_COMMAND_C30";
char cmdFlagv[] = 	"RM_CHOPPER_SMASH_COMMAND_FLAG_S";
char yxCorrFlagv[] = 	"RM_CHOPPER_YZ_CORRECTION_FLAG_L";

char posv[] =		"RM_CHOPPER_POS_V4_L";
char posMmv[] =		"RM_CHOPPER_POS_MM_V4_F";
char cmdPosMmv[] =	"RM_CHOPPER_CMD_POS_MM_V4_F";
char cmdPosTypev[] =	"RM_CHOPPER_CMD_POS_TYPE_C1";
char farPosMmv[] = 	"RM_CHOPPER_FAR_POS_MM_V4_F";
char homeChkv[] = 	"RM_CHOPPER_HOME_CHECK_RESULTS_V3_S";
char homeChkTimev[] =	"RM_CHOPPER_HOME_CHECK_TIME_L";
char pmacResetTimev[] =	"RM_CHOPPER_PMAC_RESET_TIME_L";
#if 0
char cmdPosv[] =	"RM_CHOPPER_CMD_POS_V4_L";
char farPosv[] = 	"RM_CHOPPER_FAR_POS_V4_L";
#endif

char unixTimev[] =	"RM_UNIX_TIME_L";
enum eprintfTokens {PMAC_COMMAND, PMAC_RESPONSE, STATUS_BITS,
                    MONITOR_TIMESTAMP, SMASH_COMMAND,
                    SMASH_COMMAND_FLAG, YZ_CORRECTION_FLAG,
                    POS, CMD_POS, CMD_POS_TYPE, HOME_CHECK_RESULTS,
                    HOME_CHECK_TIME, PMAC_RESET_TIME,
                    UNIX_TIME};
int timeOutJiffies = 300;		/* 3 sec. */

const double cnt2mm[4] = {X_MM_PER_COUNT, Y_MM_PER_COUNT, Z_MM_PER_COUNT,
                          TILT_ARCSEC_PER_COUNT};

const double mm2cnt[4] = {X_COUNTS_PER_MM, Y_COUNTS_PER_MM, Z_COUNTS_PER_MM,
                          TILT_COUNTS_PER_ARCSEC};
const int updateCounts[] = {X_UPDATE_COUNTS, Y_UPDATE_COUNTS, Z_UPDATE_COUNTS};

/* Variables written by both threads */
int updateCountdown = 0;

/* Variables written by the main thread */
int antlist[RM_ARRAY_SIZE];
int ant = RM_ANT_0;

int pmacfd;
char pmacrtn[PMAC_RTN_SIZE];

pthread_t ChopperMonitorTID;
int stopMonitor = 0;
pthread_attr_t attr;
struct sched_param fifo_param;
pthread_mutex_t pmacMutex = PTHREAD_MUTEX_INITIALIZER;
char dmyVarName[RM_NAME_LENGTH];

short pmac_command_flag;
short homeCheckResults[3];
/* These 'pos' variables contain raw counts.
 * The standard value for pos[3] is TILT_HOME = 32768 */
int pos[4], cmdPos[4], farPos[4], nearPos[4];
float cosCoef[4], sinCoef[4];
float posMm[4], cmdPosMm[4], farPosMm[4];
char cmdPosType;
int cmdPosWritten;

/* Variables written by the monitor thread */
int unixTime;
unsigned char statusBits[16];

int p0status, p1status, p2status, p3status, p20status;
int updatesNeeded = 0, updateTries = 0;
short chopperMotionStatus=0;
double subx_counts, suby_counts, subz_counts, subtilt_counts;

int main(int argc, char*argv[]) {
    int rm_status;

    DAEMONSET
    setpriority(PRIO_PROCESS, (0), (CONTROL_PRIO));

    /* initializing ref. mem. */
    rm_status=rm_open(antlist);
    if(rm_status != RM_SUCCESS) {
        rm_error_message(rm_status,"rm_open()");
        fprintf(stderr,"Could not open reflective memory.");
        exit(QUIT_RTN);
    }
    /* Clear any prior commands */
    rm_status=rm_write(RM_ANT_0,cmdFlagv,&rm_status);
    if(rm_status != RM_SUCCESS) {
        rm_error_message(rm_status,"rm_write smash cmd flag");
        exit(QUIT_RTN);
    }

    /* setup to listen to ref. mem. interrupts for SMAsh commands*/
    rm_status=rm_monitor(RM_ANT_0, cmdFlagv);
    if(rm_status != RM_SUCCESS) {
        rm_error_message(rm_status,"rm_monitor of smash cmd flag");
        exit(1);
    }

    /* opening the chopper pmac serial comm device driver */
    pmacfd = open("/dev/iPOctal232-3",O_RDWR);
    if(pmacfd == -1) {
        perror("Opening pmac serial line");
        exit(QUIT_RTN);
    }
    rm_status=ioctl(pmacfd,IOCTL_CHANGE_TIMEOUT,&timeOutJiffies);
    if(rm_status) perror("Setting timeout for PMAC response");

    /* set up the attributes for the Monitor thread */
    pthread_attr_init(&attr);
    pthread_attr_setinheritsched(&attr, PTHREAD_EXPLICIT_SCHED);
    pthread_attr_setschedpolicy(&attr, SCHED_FIFO);
    fifo_param.sched_priority = 16;
    pthread_attr_setschedparam(&attr, &fifo_param);

    ReadConfigFile();
    /* Start the monitor thread */
    if (pthread_create(&ChopperMonitorTID, &attr, ChopperMonitor,
                       (void *)0) != 0) {
        perror("pthread_create ChopperMonitor");
        exit(-1);
    }

    /* use the original thread for controlling the chopper */
    ChopperPMAC();

    return 0;
}


void *ChopperPMAC()
{
    char pmac_command[30];
    int rm_status, i;

    pmac_command_flag = 0;
    rm_write(RM_ANT_0,cmdFlagv,&pmac_command_flag);
    ReadCmdPos();
    for(;;) {
#if 0
        rm_status=rm_read(RM_ANT_0,cmdFlagv,&pmac_command_flag);
        if(rm_status != RM_SUCCESS) {
            rm_error_message(rm_status,"rm_read() smash cmd flag");
            exit(1);
        }
        if(pmac_command_flag == 0) {
            rm_status=rm_read_wait(&ant,cmdFlagv,&pmac_command_flag);
            if(rm_status == RM_REL_PREMATURE) {
                pmac_command_flag = AUTO_UPDATE;
                UpdateXyz();
                pmac_command_flag = 0;
                continue;
            } else if(rm_status != RM_SUCCESS) {
                rm_error_message(rm_status,
                                 "rm_read_wait for smash cmd flag");
                exit(1);
            }
        }
#else
        pmac_command_flag = 0;
        rm_status=rm_write(RM_ANT_0,cmdFlagv,&pmac_command_flag);
        if(rm_status != RM_SUCCESS) {
            rm_error_message(rm_status,"rm_write() pmac_command_flag");
            exit(1);
        }
        rm_status=rm_read_wait(&i, dmyVarName, &pmac_command_flag);
        if(rm_status == RM_REL_PREMATURE) {
            pmac_command_flag = AUTO_UPDATE;
            UpdateXyz();
            /* If a command came in while updating, do it */
            rm_read(RM_ANT_0,cmdFlagv,&pmac_command_flag);
            if(pmac_command_flag == 0) continue;
        } else if(rm_status != RM_SUCCESS) {
            rm_error_message(rm_status,"rm_read_wait for pmac_command_flag");
            exit(1);
        }
#endif

        rm_status=rm_read(RM_ANT_0,cmdv, pmac_command);
        if(rm_status != RM_SUCCESS) {
            rm_error_message(rm_status,"rm_read() chopper SMASH command");
            exit(1);
        }
        cmdPosWritten = 0;

        /* fprintf(stderr, "chopperControl: recieved command %s\n",
        pmac_command); */
        /* check if it is a farChopper or other complex command*/
        if(!strncmp(pmac_command,"far", 3)) {
            ReadConfigFile();
            MoveXyz(farPos);
            MoveTilt(farPos[3]);
            WriteCmdPos('F');
        } else if(!strncmp(pmac_command,"near", 4)) {
            ReadConfigFile();
            MoveXyz(nearPos);
            MoveTilt(nearPos[3]);
            WriteCmdPos('N');
        } else if(!strncmp(pmac_command,"stop", 4)) {
	    pmacrwp("p2=8", pmacrtn);
	    sleep(3);
	    pmacrwp("p2=5", pmacrtn);
        } else if(!strncmp(pmac_command,"start", 5)) {
	    pmacrwp("p2=7", pmacrtn);
	    sleep(2);
        } else if(!strncmp(pmac_command,"position", 8)) {
	    int needsmove = 0;
	    int newpos;

            rm_status = rm_read(RM_ANT_0, cmdPosMmv, cmdPosMm);
            for(i = 0; i < 3; i++) {
                if((newpos = cmdPosMm[i] * mm2cnt[i]) != cmdPos[i]) {
		    cmdPos[i] = newpos;
		    needsmove = 1;
		}
            }
	    if(needsmove) MoveXyz(cmdPos);
            if((newpos = cmdPosMm[3] * mm2cnt[3] + TILT_HOME) != cmdPos[3]) {
		if(p20status != 2) {	/* Not Chopping */
		    MoveTilt(newpos);
		} else {
		    cmdPos[3] = newpos;
		}
	    }
            WriteCmdPos('O');
        } else if(!strncmp(pmac_command,"init", 4)) {
            InitChopper();
        } else if(!strncmp(pmac_command,"check", 5)) {
            CheckHome();
        } else if(!strncmp(pmac_command,"home", 4) ||
                  !strcmp(pmac_command, "P2=1") ||
                  !strcmp(pmac_command, "p2=1")) {
            HomeChopper();
        } else if(!strncmp(pmac_command,"restart", 7)) {
	    RestartMotors();
        /* Must not allow "$$$***" as that would erase all of PMAC's mwmory */
        } else if(!strncmp(pmac_command,"$$$", 3) ||
                  !strncmp(pmac_command, "reset", 5)) {
            ResetPMAC();
        } else if(pmac_command_flag == ICHOPPER_CMD) {
            pmacrwp(pmac_command, pmacrtn);
        } else {
            if(chopperMotionStatus==0) {
                pmacrwp(pmac_command, pmacrtn);
            } else if(chopperMotionStatus==1) {
                SendMessageToRM("Chopper busy. Command failed. ");
            } else if(chopperMotionStatus==-1) {
                SendMessageToRM("Chopper error. Command failed. ");
            }
        }
        updateTries  = 0;	/* allow more update replies after a cmd */

        if(pmac_command_flag == ICHOPPER_CMD) {
            if(rm_write_notify(RM_ANT_0,pmacResponsev,&pmacrtn) != RM_SUCCESS) {
                eprintf(PMAC_RESPONSE, "rm_write of pmacResponse failed\n");
            }
        }
        if(!cmdPosWritten) {
            ReadCmdPos();
            WriteCmdPos('O');
        }
        sleep(1);
    } /* infinite while loop */
}

void *ChopperMonitor()
{
    char response[64];
    short chopper_status=1;
    int rm_status;
    int motor;
    int motorErrors;
#if 0
    float rm_chopper_x_mm, rm_chopper_y_mm, rm_chopper_z_mm, rm_chopper_tilt_arcseconds;
    double subtilt_arcseconds;
#endif

    setpriority(PRIO_PROCESS, (0), (MONITOR_PRIO));
    while(1) {
        if(stopMonitor) goto idle;
        /* get the chopper tilt, position and status */
        pmacrw("#1p", response);
        posMm[0] = (pos[0] = atof(response)) * cnt2mm[0];
        pmacrw("#2p", response);
        posMm[1] = (pos[1] = atof(response)) * cnt2mm[1];
        pmacrw("#3p", response);
        posMm[2] = (pos[2] = atof(response)) * cnt2mm[2];
        pmacrw("#4p", response);
        posMm[3] = ((pos[3] = atof(response)) - TILT_HOME) * cnt2mm[3];
        pmacrw("p0", response);
        p0status=atoi(response);
        pmacrw("p1", response);
        p1status=atoi(response);
        pmacrw("p2", response);
        p2status=atoi(response);
        pmacrw("p3", response);
        p3status=atoi(response);
        pmacrw("p20", response);
        p20status=atoi(response);

        if((p0status==0)&&(p3status==0)) chopperMotionStatus=0;
        else if((p0status==3)||(p3status==3)) chopperMotionStatus=-1;
        else if((p0status==4)||(p3status==1)) chopperMotionStatus=1;

        /* pass the chopper variables to monitor programs through RM */

#if 0
        chopping_flag = (p2status & 0xf) | (p1status & 0xf) << 4;
        rm_status=rm_write(RM_ANT_0,"RM_CHOPPING_FLAG_S", &chopping_flag);
#endif

        if(abs(pos[3]-farPos[3]) > TILT_ERROR_COUNTS) {
            chopper_status=1;
        } else {
            chopper_status=0;
        }

        if(abs(pos[0]-farPos[0]) > X_ERROR_COUNTS) chopper_status |= 8;
        if(abs(pos[1]-farPos[1]) > Y_ERROR_COUNTS) chopper_status |= 4;
        if(abs(pos[2]-farPos[2] )> Z_ERROR_COUNTS) chopper_status |= 2;
#if 0
        chopper_status |= (p0status & 0xf) << 4;
        chopper_status |= (p3status & 0xf) << 8;
        chopper_status |= (p20status & 0xf) << 12;

        rm_status=rm_write(RM_ANT_0,"RM_CHOPPER_STATUS_S",&chopper_status);
#endif

        statusBits[P0] = p0status;
        statusBits[P1] = p1status;
        statusBits[P2] = p2status;
        statusBits[P3] = p3status;
        statusBits[P20] = p20status;
        statusBits[POS_ERR_BITS] = chopper_status;

        motorErrors = 0;
        for(motor = 1; motor < 5; motor++) {
            static char motorStatusCmd[4] = "#1?";

            motorStatusCmd[1] = '0' + motor;
            statusBits[X_MOTOR_STATUS - 1 + motor] = 0 ;
            pmacrw(motorStatusCmd, response);
            if(2 & response[0])
                statusBits[X_MOTOR_STATUS - 1 + motor] |= MOTOR_POS_LIM ;
            if(4 & response[0])
                statusBits[X_MOTOR_STATUS - 1 + motor] |= MOTOR_NEG_LIM ;
            if(4 & response[1]) {
                statusBits[X_MOTOR_STATUS - 1 + motor] |= MOTOR_OL;
            }
            if(motor != 4 && !(4 & response[9]))
                statusBits[X_MOTOR_STATUS - 1 + motor] |= MOTOR_NOT_HOME;
            if(!(1 & response[11])) {
                statusBits[X_MOTOR_STATUS - 1 + motor] |= MOTOR_NOT_IN_POS;
            }
            if(4 & response[11])
                statusBits[X_MOTOR_STATUS - 1 + motor] |= MOTOR_FFE ;
            if(motor != 4) {
                if(!(4 & response[9]))
                    statusBits[X_MOTOR_STATUS - 1 + motor] |= MOTOR_NOT_HOME;
                if(abs(pos[motor] - cmdPos[motor]) > updateCounts[motor])
                    motorErrors = 1;
            }
        }
        /* If the command thread is idle, the chopper is homed and XYZ is ok
         * signal command thread if there are motor errors */
        if(pmac_command_flag == 0 && p0status == 0 && p3status == 0) {
            if(updateCountdown <= 0) {
                if(motorErrors) {
                    if(updateTries < 10) {
                        if(updateCountdown-- < -2) {
                            updatesNeeded = motorErrors;
                            rm_release_read();
                            updateTries++;
                        }
                    } else {
                        if(updateTries == 10) {
                            fprintf(stderr, "Update failed after %d tries, "
                                    "no more updates\n", updateTries);
                            updateTries++;
                        }
                    }
                } else {
                    if(updateCountdown < 0) updateCountdown++;
                    if(updateTries > 0 && updateTries < 10) {
                        updateTries--;
                    }
                }
            } else if(updateCountdown > 0) {
                updateCountdown --;
            }
        }

        rm_status=rm_write(RM_ANT_0,statusBitsv,&statusBits);
        if(rm_status != RM_SUCCESS) {
            eprintf(STATUS_BITS, "rm_write of status bits failed\n");
        }

#if 0
        rm_chopper_x_mm = (float) subx_counts / 1000.;
        rm_chopper_y_mm = (float) suby_counts / 500.;
        rm_chopper_z_mm = (float) subz_counts / 2000.;
        rm_chopper_tilt_arcseconds = ((float) subtilt_counts -
                                      (float)farPos[3]) * 0.009;
        /* 1.5e-4 * 60 arcseconds; 10000cts = 1 .5' on the sky*/
        subtilt_arcseconds=(double)rm_chopper_tilt_arcseconds;
        rm_status=rm_write(RM_ANT_0,"RM_CHOPPER_X_MM_F",&rm_chopper_x_mm);
        rm_status=rm_write(RM_ANT_0,"RM_CHOPPER_Y_MM_F",&rm_chopper_y_mm);
        rm_status=rm_write(RM_ANT_0,"RM_CHOPPER_Z_MM_F",&rm_chopper_z_mm);
        rm_status=rm_write(RM_ANT_0,"RM_CHOPPER_ANGLE_F",
                           &rm_chopper_tilt_arcseconds);
#endif
        subx_counts = pos[0];
        suby_counts = pos[1];
        subz_counts = pos[2];
        subtilt_counts = pos[3];
        rm_status=rm_write(RM_ANT_0,xCountsv,&subx_counts);
        rm_status=rm_write(RM_ANT_0,yCountsv,&suby_counts);
        rm_status=rm_write(RM_ANT_0,zCountsv,&subz_counts);
        rm_status=rm_write(RM_ANT_0,tiltCountsv,&subtilt_counts);

        rm_status=rm_write(RM_ANT_0,posv, pos);
        rm_status=rm_write(RM_ANT_0,posMmv, posMm);

        rm_status=rm_read(RM_ANT_0, unixTimev, &unixTime);
        rm_status=rm_write(RM_ANT_0,monTimestampv,&unixTime);
idle:
        sleep(1);
    }
    pthread_detach(ChopperMonitorTID);
    pthread_exit((void *) 0);
}

void pmacrw(char *command, char *rdBuf) {
    int i;
    int nbytes;
    char inChar;
    char buffer[50];
    int status;
    static char clearit[] = "\r";
    int try;
    static int failures = 0;

    pthread_mutex_lock(&pmacMutex);
    try = 0;
tryAgain:
    try++;
    status=ioctl(pmacfd, IOCTL_FLUSH, &buffer);
    if(status) perror("Flushing serial line buffer");
    strcpy(buffer,command);
    strcat(buffer,"\r");
    if((status = write(pmacfd, buffer,strlen(buffer))) < 0) {
        if(status == -2) {
            fprintf(stderr, "Writing to PMAC failed: excessive waiting time\n");
        } else {
            perror("Writing to PMAC");
        }
        if(try < 3) {
            write(pmacfd, clearit, sizeof(clearit));
            usleep(100000);
            goto tryAgain;
        } else {
            fprintf(stderr, "Too many write failures to PMAC, I quit\n");
            sleep(1);
            exit(QUIT_RTN);
        }
    }
    inChar=' ';
    i=0;
    for(;;) {
        nbytes=read(pmacfd,&inChar,1);
        if(nbytes < 0) {
            if(try < 4) {
                sprintf(buffer, "Sent PMAC %s - response", command);
                perror(buffer);
            }
            write(pmacfd, clearit, sizeof(clearit));
            usleep(100000);
            if(try < 2) {
                goto tryAgain;
            } else {
                if(++failures > 3) {
                    fprintf(stderr, "No PMAC response after 6 trys, I quit\n");
                    exit(QUIT_RTN);
                }
                goto done;
            }
        }
        failures = 0;
        try = 0;
        if(inChar == 6) {
            goto done;
        } else if(inChar==0x7) {
            int j;

            for(j = 0; j < 7; j++) {
                nbytes = read(pmacfd,&inChar,1);
                if(nbytes <= 0)
                    goto done;
                if(inChar == 0xd)
                    break;
                buffer[j] = inChar;
            }
            buffer[j] = 0;
            fprintf(stderr, "Cmd %s -> Error return from PMAC - %s\n",
                    command, buffer);
            break;
        } else if(i < PMAC_RTN_SIZE) {
            rdBuf[i]=inChar;
            i++;
        }
    }
done:
    rdBuf[i]=0x0;
    pthread_mutex_unlock(&pmacMutex);
    return;
}

#if 0
void pmacw(char *command)
{
    int i;
    int nbytes=0,newbytes=0;
    char outChar,inChar;
    char buffer[50];
    int inbytes=0;
    int status;

    status=ioctl(pmacfd,IOCTL_FLUSH,&buffer);
    if(status) fprintf(stderr,
                           "chopper pmac buffer flushing status=%d\n",status);
    strcpy(buffer,command);
    strcat(buffer,"\r");
    write(pmacfd, buffer,strlen(buffer));
}
#endif

void ReadConfigFile(void) {
    FILE *fp;
    char line[80], *cp;
    int file;
    int rm_status;
    int i, axis, usecounts = 0;
    float value;
    static char fname[][40] = {
                                  "/application/configFiles/chopper.conf",
                                  "/instance/configFiles/chopper.conf"
                              };

    for(file = 0; file < 2; file++) {
        if((fp = fopen(fname[file], "r")) == NULL) {
            fprintf(stderr, "ReadConfigFile could not open %s\n", fname[file]);
            exit(QUIT_RTN);
        }
        while(fgets(line, sizeof(line), fp) != NULL) {
            for(cp = line; *cp; cp++) {
                if(*cp == '\n') {
                    *cp = 0;
                    break;
                }
            }
            if(*line == NULL || *line == '#') continue;
            for(cp = line; *cp != 0; cp++) {
                if(*cp == ' ') {
                    *cp++ = 0;
                    break;
                }
            }
            while(*cp == ' ') cp++;	/* skip to next word or end */
            if(strcmp(line, "PMAC") == 0) {
                pmacrwp(cp, pmacrtn);
            } else if(strcmp(line, "COUNTS") == 0) {
                usecounts = 1;
            } else {
                if((axis = *cp - 'x') < 0) axis += ('x' - 't' + 3);
                if(sscanf(++cp, "%f", &value) != 1 || axis < 0 || axis > 3) {
                    fprintf(stderr, "Bad line %s in %s\n", line, fname[file]);
                } else {
                    if(! usecounts) {
                        value *= mm2cnt[axis];
                    }
                    if(axis == 3) value += 32768;
                    if(strcmp(line, "FAR") == 0) {
                        farPos[axis] = floor(value + 0.5);
                    } else if(strcmp(line, "NEAR") == 0) {
                        nearPos[axis] = floor(value + 0.5);
                    } else if(strcmp(line, "COS_EL_COEF") == 0) {
                        cosCoef[axis] = value;
                    } else if(strcmp(line, "SIN_EL_COEF") == 0) {
                        sinCoef[axis] = value;
                    } else {
                        fprintf(stderr, "unrecognized line %s in %s\n",
                                line, fname[file]);
                    }
                }
            }
        }
        fclose(fp);
        for(i = 0; i < 4; i++) {
            farPosMm[i] = (farPos[i] - ((i == 3)? TILT_HOME: 0)) * cnt2mm[i];
        }
        rm_status=rm_write(RM_ANT_0,farPosMmv,farPosMm);
        if(rm_status != RM_SUCCESS) {
            rm_error_message(rm_status,"writing CHOPPER_FAR_POS_MM");
        }
    }
#if 0
    for(i = 0; i < 4; i++) {
        fprintf(stderr, "%1d %6d %6d %10.3f %10.3f\n", i, farPos[i], nearPos[i], cosCoef[i], sinCoef[i]);
    }
#endif
}

#if 0
void ReadFarCounts(void) {
    FILE *fp_farChopper;
    char cname[100];
    int rm_status;
    int i;

    fp_farChopper=fopen("/instance/lib/farChopper.dat","r");
    if(fp_farChopper==NULL) {
        fprintf(stderr,
                "farChopper: Could not open /instance/lib/farChopper.dat\n");
        exit(QUIT_RTN);
    }
    fscanf(fp_farChopper,"%s %d",cname,&farPos[0]);
    fscanf(fp_farChopper,"%s %d",cname,&farPos[1]);
    fscanf(fp_farChopper,"%s %d",cname,&farPos[2]);
    fscanf(fp_farChopper,"%s %d",cname,&farPos[3]);
    fclose(fp_farChopper);
    rm_status=rm_write(RM_ANT_0,farPosv,farPos);
    if(rm_status != RM_SUCCESS) {
        rm_error_message(rm_status,"writing CHOPPER_FAR_POS");
    }
    for(i = 0; i < 4; i++) {
        farPosMm[i] = (farPos[i] - ((i == 3)? TILT_HOME: 0)) * cnt2mm[i];
    }
    rm_status=rm_write(RM_ANT_0,farPosMmv,farPosMm);
    if(rm_status != RM_SUCCESS) {
        rm_error_message(rm_status,"writing CHOPPER_FAR_POS_MM");
    }
}

void ReadNearCounts(void) {
    FILE *fp_nearChopper;
    char cname[100];

    fp_nearChopper=fopen("/instance/lib/nearChopper.dat","r");
    if(fp_nearChopper==NULL) {
        fprintf(stderr, "chopperControl: Could not open "
                "/instance/lib/nearChopper.dat\n");
        exit(QUIT_RTN);
    }
    fscanf(fp_nearChopper,"%s %d",cname,&nearPos[0]);
    fscanf(fp_nearChopper,"%s %d",cname,&nearPos[1]);
    fscanf(fp_nearChopper,"%s %d",cname,&nearPos[2]);
    fscanf(fp_nearChopper,"%s %d",cname,&nearPos[3]);
    fclose(fp_nearChopper);
}
#endif

int MoveXyz(int *newPos) {
    char pmaccommand[30];
    int i;

    sprintf(pmaccommand, "P4=%dP5=%dP6=%d", newPos[0], newPos[1], newPos[2]);
    pmacrwp(pmaccommand, pmacrtn);
    for(i = 0; i < 3; i++) {
        cmdPos[i] = newPos[i];
    }
    sleep(1);		/* Let me see the command */
#if 0
    pmacrwp("P2=3", pmacrtn);
    sleep(2);		/* Wait for the monitor thread to get a new p3status */
    for(i = 0; i < 30; i++) {
        if(p3status == 0) { /* IN_POS_XYZ */
            return(0);
        } else if(p3status == 3) { /* POS_ERROR */
            SendMessageToRM("XYZ move error");
            return(1);
        }
        sleep(1);
    }
    SendMessageToRM("XYZ move timeout");
    return(1);
#endif
    return(UpdateXyz());
}

int UpdateXyz(void) {
    int i;

    pmacrwp("P2=3", pmacrtn);
    sleep(2);		/* Wait for the monitor thread to get a new p3status */
    for(i = 0; i < 30; i++) {
        if(p3status == 0) { /* IN_POS_XYZ */
            updateCountdown = 2;
            return(0);
        } else if(p3status == 3) { /* POS_ERROR */
            SendMessageToRM("XYZ move error");
            return(1);
        }
        sleep(1);
    }
    SendMessageToRM("XYZ move timeout");
    return(1);
}

void ReadCmdPos(void) {
    pmacrw("P4P5P6P21", pmacrtn);
    sscanf(pmacrtn, "%d %d %d %d", cmdPos, cmdPos + 1, cmdPos + 2,
           cmdPos + 3);
}

void ReadCaptureRegs(int * pos) {
    pmacrwp("M103M203M303", pmacrtn);
    sscanf(pmacrtn, "%d%d%d", pos, pos+1, pos+2);
}

void ReadCaptureFlags(int * flags) {
    pmacrwp("M117M217M317", pmacrtn);
    sscanf(pmacrtn, "%d%d%d", flags, flags+1, flags+2);
}

void ReadXyzEncoders(int * pos) {
    pmacrwp("M101M201M301", pmacrtn);
    sscanf(pmacrtn, "%d%d%d", pos, pos+1, pos+2);
}

int MoveTilt(int t) {
    char pmaccommand[30];
    int i;

    sprintf(pmaccommand,"p21=%d", t);
    pmacrwp(pmaccommand, pmacrtn);
    cmdPos[3] = t;
    sleep(1);		/* Let me see the command */
    pmacrwp("P2=5", pmacrtn);
    sleep(2);		/* Wait for the monitor thread to get a new p20status */
    for(i = 0; i < 30; i++) {
        if(p20status == 0) { /* IN_POS_XYZ */
            pmacrwp("I425=$92C00C", pmacrtn);
            return(0);
        } else if(p20status == 3) { /* POS_ERROR */
            SendMessageToRM("Tilt move error");
            return(1);
        }
        sleep(1);
    }
    SendMessageToRM("Tilt move timeout");
    return(1);
}

int CheckHome(void) {
    char messg[48];
    static int negPos[3] = {-500, -500, -500};
    static int posPos[3] = {500, 500, 500};
    int pos1[3], pos2[3];
    int i, err;

    if(p0status != 0) {
        SendMessageToRM("Chopper not homed, can not check home\n");
        return(1);
    }
    if(MoveXyz(negPos) != 0) return(1);
    WriteCmdPos('C');
    ReadCaptureRegs(pos1);		/* Reset Captured Flag */
    if(MoveXyz(posPos) != 0) return(1);
    WriteCmdPos('C');
    ReadCaptureFlags(pos1);
    if((pos1[0] & pos1[1] & pos1[2]) == 0) {
        strcpy(messg, "Failed to capture ");
        if(pos1[0] == 0) strcat(messg, "X");
        if(pos1[1] == 0) strcat(messg, "Y");
        if(pos1[2] == 0) strcat(messg, "Z");
        strcat(messg, " flags\n");
        SendMessageToRM(messg);
        sleep(3);
    }
    ReadCaptureRegs(pos1);
    ReadXyzEncoders(pos2);
    err = 0;
    for(i = 0; i < 3; i++) {
        pos1[i] += pos[i] - pos2[i];
        homeCheckResults[i] = (pos1[i] < -32767)? -32767:
                              ((pos1[i] > 32767)? 32767: pos1[i]);
        homeCheckResults[i] = pos1[i];
        if(abs(pos1[i]) > 3) err++;
    }
    sprintf(pmacrtn, "Home shifts are %d %d %d\n", pos1[0],
            pos1[1], pos1[2]);
    SendMessageToRM(pmacrtn);
    if(rm_write(RM_ANT_0, homeChkv, homeCheckResults) != RM_SUCCESS) {
        eprintf(HOME_CHECK_RESULTS, "rm_write of homeCheckResults failed\n");
    }
    if(rm_write(RM_ANT_0, homeChkTimev, &unixTime) != RM_SUCCESS) {
        eprintf(HOME_CHECK_TIME, "rm_write of homeChkTime failed\n");
    }
    return(err);
}

void ResetPMAC( void) {
    char resetcmd[] = "$$$";

    SendMessageToRM(resetcmd);
    stopMonitor = 1;
    usleep(500000);
    write(pmacfd, resetcmd, 3);
    sleep(4);
    write(pmacfd, "\r", 1);
    sleep(1);
    chopperMotionStatus = 0;
    ReadConfigFile();
    stopMonitor = 0;
    pmacrtn[0] = 0;
    if(rm_write(RM_ANT_0, pmacResetTimev, &unixTime) != RM_SUCCESS) {
        eprintf(PMAC_RESET_TIME, "rm_write of PMAC reset time failed\n");
    }
}

void RestartMotors() {
    pmacrwp("P2=8", pmacrtn);
    sleep(3);
    pmacrwp("#4J/", pmacrtn);
    pmacrwp("&1A", pmacrtn);
}

void HomeChopper(void) {
    int i, pass;

    for(pass = 0; pass < 2; pass++) {
        pmacrwp("P2=1", pmacrtn);
        sleep(10);
        for(i = 0; i < 120; i++) {
            if(p0status!= 4) break;
            sleep(1);
        }
        sleep(2);
        for(i = 0; i < 10; i++) {
            if(p20status != 1) break;
            sleep(1);
        }
        if(p0status == 0) break;
    }
    if(p0status == 0 && p20status != 0) MoveTilt(TILT_HOME);
    WriteCmdPos('H');
}

void InitChopper(void) {
    if(p0status != 0) {
        ResetPMAC();
        HomeChopper();
    } else {
        if(CheckHome()) {
            ResetPMAC();
            HomeChopper();
        }
        sleep(2);
    }
    if(p0status == 0) {
        ReadConfigFile();
        MoveXyz(farPos);
        MoveTilt(farPos[3]);
        WriteCmdPos('F');
    } else {
        return;
    }
    if(p3status != 0) {
        MoveXyz(farPos);
        WriteCmdPos('F');
    }
    if(p20status != 0) {
        MoveXyz(farPos);
        WriteCmdPos('F');
    }
}

void WriteCmdPos(char type) {
    int i, rm_status;

    cmdPosType = type;
    for(i = 0; i < 4; i++) {
        cmdPosMm[i] = (cmdPos[i] - ((i == 3)? TILT_HOME: 0)) * cnt2mm[i];
    }
    rm_status = rm_write(RM_ANT_0, cmdPosMmv, cmdPosMm);
    /*    rm_status = rm_write(RM_ANT_0, cmdPosv, cmdPos); */
    rm_status = rm_write(RM_ANT_0, cmdPosTypev, &cmdPosType);
    cmdPosWritten = 1;
}

void SendMessageToRM(char *messg) {
    int rm_status;
    char message[100];

    strncpy(message, messg, sizeof(message));
    rm_status=rm_write(RM_ANT_0,"RM_TRACK_MESSAGE_C100",message);
#if 0
    fprintf(stderr, "chopperControl: wrote message %s "
            "rm_status = %d\n", message, rm_status);
#endif

}

#if 0
void SigAlrmHndlr(int signo) {
    int buffer;

    if(ioctl(pmacfd,IOCTL_READ_ABORT,&buffer) < 0)
        perror("Aborting read");
    fprintf(stderr, "Alarm waiting for PMAC response\n");
}
#endif
